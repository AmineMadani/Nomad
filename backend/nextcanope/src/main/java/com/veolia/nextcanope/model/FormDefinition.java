/*
 * Generated by TelosysTools with the custom VEOLIA template
 */
package com.veolia.nextcanope.model;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Date;
import java.util.List;
import jakarta.persistence.*;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.stream.Collectors;
import java.util.ArrayList;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;


/**
 * JPA entity class for "FormDefinition"
 *
 * @author VEOLIA
 *
 */
@Entity
@Table(name="form_definition", schema="nomad" )
@JsonIgnoreProperties(ignoreUnknown = true)
public class FormDefinition implements Serializable {

    private static final long serialVersionUID = 1L;

    //--- ENTITY PRIMARY KEY ---\\
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(name="id", nullable=false)
    private Long id;

    //--- ENTITY DATA FIELDS ---\\
    @Column(name="fdn_definition", nullable=false, length=2147483647)
    @JsonProperty("fdn_definition")
    private String fdnDefinition;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="fdn_dcre")
    @CreationTimestamp
    @JsonProperty("fdn_dcre")
    private Date fdnDcre;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="fdn_dmod")
    @UpdateTimestamp
    @JsonProperty("fdn_dmod")
    private Date fdnDmod;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="fdn_ddel")
    @JsonProperty("fdn_ddel")
    private Date deletedAt;

    @Column(name="fdn_code", nullable=false, length=2147483647)
    @JsonProperty("fdn_code")
    private String fdnCode;


    //--- ENTITY LINKS ( RELATIONSHIP ) ---\\
    @ManyToOne
    @JoinColumn(name="fdn_ucre_id", referencedColumnName="id")
	@JsonIgnore
    private Users createdBy;

    @OneToMany(mappedBy="formDefinition")
    private List<FormTemplateCustom> listOfFormTemplateCustom;

    @OneToMany(cascade = CascadeType.PERSIST, mappedBy="formDefinition")
    private List<FormTemplate> listOfFormTemplate;

    @ManyToOne
    @JoinColumn(name="fdn_umod_id", referencedColumnName="id")
	@JsonIgnore
    private Users modifiedBy;

    /**
     * Constructor
     */
    public FormDefinition() {
		super();
    }
    
    //--- GETTERS & SETTERS FOR FIELDS ---\\
    public Long getId() {
        return this.id;
    }

    public void setId( Long id ) {
        this.id = id ;
    }

    public String getFdnDefinition() {
        return this.fdnDefinition;
    }

	public void setFdnDefinition( String fdnDefinition ) {
        this.fdnDefinition = fdnDefinition ;
    }

    public Date getFdnDcre() {
        return this.fdnDcre;
    }

	public void setFdnDcre( Date fdnDcre ) {
        this.fdnDcre = fdnDcre ;
    }

    public Date getFdnDmod() {
        return this.fdnDmod;
    }

	public void setFdnDmod( Date fdnDmod ) {
        this.fdnDmod = fdnDmod ;
    }

    public Date getDeletedAt() {
        return deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    public void markAsDeleted(Users user) {
        this.deletedAt = new Date();
        this.modifiedBy = user;
    }

    public String getFdnCode() {
        return this.fdnCode;
    }

	public void setFdnCode( String fdnCode ) {
        this.fdnCode = fdnCode ;
    }

    //--- GETTERS AND SETTERS FOR LINKS ---\\
    public Users getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Users createdBy) {
        this.createdBy = createdBy;
    }

    public List<FormTemplateCustom> getListOfFormTemplateCustom() {
        if (this.listOfFormTemplateCustom != null) {
            return this.listOfFormTemplateCustom.stream()
                .filter(e -> e.getDeletedAt() == null)
                .collect(Collectors.toList());
        } else {
            return new ArrayList<>();
        }
    }

    public List<FormTemplateCustom> getListOfFormTemplateCustomWithDeleted() {
        return this.listOfFormTemplateCustom;
    }

    public void setListOfFormTemplateCustom(List<FormTemplateCustom> listOfFormTemplateCustom) {
        this.listOfFormTemplateCustom = listOfFormTemplateCustom;
    }

    public List<FormTemplate> getListOfFormTemplate() {
        if (this.listOfFormTemplate != null) {
            return this.listOfFormTemplate.stream()
                .filter(e -> e.getDeletedAt() == null)
                .collect(Collectors.toList());
        } else {
            return new ArrayList<>();
        }
    }

    public List<FormTemplate> getListOfFormTemplateWithDeleted() {
        return this.listOfFormTemplate;
    }

    public void setListOfFormTemplate(List<FormTemplate> listOfFormTemplate) {
        this.listOfFormTemplate = listOfFormTemplate;
    }

    public Users getModifiedBy() {
        return this.modifiedBy;
    }

    public void setModifiedBy(Users modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

}
