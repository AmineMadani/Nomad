/*
 * Generated by TelosysTools with the custom VEOLIA template
 */
package com.veolia.nextcanope.model;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Date;
import java.util.List;
import jakarta.persistence.*;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import java.util.stream.Collectors;
import java.util.ArrayList;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;


/**
 * JPA entity class for "LayerStyle"
 *
 * @author VEOLIA
 *
 */
@Entity
@Table(name="layer_style", schema="nomad" )
@JsonIgnoreProperties(ignoreUnknown = true)
public class LayerStyle implements Serializable {

    private static final long serialVersionUID = 1L;

    //--- ENTITY PRIMARY KEY ---\\
        @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(name="id", nullable=false)
private Long id;

    //--- ENTITY DATA FIELDS ---\\
    @Column(name="lse_code", nullable=false, length=2147483647)
    @JsonProperty("lse_code")
    private String lseCode;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="lse_dcre")
    @CreationTimestamp
    @JsonProperty("lse_dcre")
    private Date lseDcre;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="lse_dmod")
    @UpdateTimestamp
    @JsonProperty("lse_dmod")
    private Date lseDmod;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="lse_ddel")
    @JsonProperty("lse_ddel")
    private Date deletedAt;


    //--- ENTITY LINKS ( RELATIONSHIP ) ---\\
    @ManyToOne
    @JoinColumn(name="lyr_id", referencedColumnName="id")
    private Layer layer;

    @ManyToOne
    @JoinColumn(name="lse_umod_id", referencedColumnName="id")
	@JsonIgnore
    private Users modifiedBy;

    @ManyToOne(cascade = CascadeType.PERSIST)
    @JoinColumn(name="syd_id", referencedColumnName="id")
    private StyleDefinition styleDefinition;

    @ManyToOne
    @JoinColumn(name="lse_ucre_id", referencedColumnName="id")
	@JsonIgnore
    private Users createdBy;

    @OneToMany(mappedBy="layerStyle")
    @Fetch(value = FetchMode.SUBSELECT)
    private List<LayerStyleCustom> listOfLayerStyleCustom;

    /**
     * Constructor
     */
    public LayerStyle() {
		super();
    }
    
    //--- GETTERS & SETTERS FOR FIELDS ---\\
    public Long getId() {
        return this.id;
    }

    public void setId( Long id ) {
        this.id = id ;
    }

    public String getLseCode() {
        return this.lseCode;
    }

	public void setLseCode( String lseCode ) {
        this.lseCode = lseCode ;
    }

    public Date getLseDcre() {
        return this.lseDcre;
    }

	public void setLseDcre( Date lseDcre ) {
        this.lseDcre = lseDcre ;
    }

    public Date getLseDmod() {
        return this.lseDmod;
    }

	public void setLseDmod( Date lseDmod ) {
        this.lseDmod = lseDmod ;
    }

    public Date getDeletedAt() {
        return deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    public void markAsDeleted(Users user) {
        this.deletedAt = new Date();
        this.modifiedBy = user;
    }

    //--- GETTERS AND SETTERS FOR LINKS ---\\
    public Layer getLayer() {
        return this.layer;
    }

    public void setLayer(Layer layer) {
        this.layer = layer;
    }

    public Users getModifiedBy() {
        return this.modifiedBy;
    }

    public void setModifiedBy(Users modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    public StyleDefinition getStyleDefinition() {
        return this.styleDefinition;
    }

    public void setStyleDefinition(StyleDefinition styleDefinition) {
        this.styleDefinition = styleDefinition;
    }

    public Users getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Users createdBy) {
        this.createdBy = createdBy;
    }

    public List<LayerStyleCustom> getListOfLayerStyleCustom() {
        if (this.listOfLayerStyleCustom != null) {
            return this.listOfLayerStyleCustom.stream()
                .filter(e -> e.getDeletedAt() == null)
                .collect(Collectors.toList());
        } else {
            return new ArrayList<>();
        }
    }

    public List<LayerStyleCustom> getListOfLayerStyleCustomWithDeleted() {
        return this.listOfLayerStyleCustom;
    }

    public void setListOfLayerStyleCustom(List<LayerStyleCustom> listOfLayerStyleCustom) {
        this.listOfLayerStyleCustom = listOfLayerStyleCustom;
    }

}
