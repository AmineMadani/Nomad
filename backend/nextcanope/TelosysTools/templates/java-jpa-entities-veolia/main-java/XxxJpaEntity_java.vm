## --------------------------------------------------
#if ( $entity.isJoinEntity() )
#cancel("No JPA class for join entity")
#end
## --------------------------------------------------
#checkId($entity)
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")
##
#set($valueToRewrite = ["default", "short"])
##---------------------------------------------------------------------------------------
##                 JPA CONFIGURATION
##---------------------------------------------------------------------------------------
## Define the default collection type to be used (default is "java.util.List" )
## #set($env.collectionType = "java.util.Set")
## #set($env.collectionType = "java.util.Collection")
## ---------------------------
## Define if "targetEntity" must be generated in @ManyToMany, @OneToMany, etc
## #set($jpa.genTargetEntity = true)
## ---------------------------
## Define default value (true or false) for "insertable" and "updatable" in "@JoinColumn"
#set($jpa.joinColumnInsertable = true)
#set($jpa.joinColumnUpdatable  = true)
## ---------------------------
## Set default FETCH-TYPE for each cardinality ( "LAZY" or "EAGER" )
## #set($jpa.manyToOneFetchType  = "LAZY" )
## #set($jpa.oneToOneFetchType   = "LAZY" )
## #set($jpa.oneToManyFetchType  = "EAGER" )
## #set($jpa.manyToManyFetchType = "EAGER" )
##---------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};
## IF ENTITY HAS A COMPOSITE PRIMARY KEY => GENERATE AN 'ID CLASS' FOR THIS PRIMARY KEY
#if ( $entity.hasCompositePrimaryKey() )
$generator.generate($target.entityName ,  "${jpaEntityIdClass}.java", $target.folder, "main-java/XxxJpaEntityId_java.vm" )
#end

import java.io.Serializable;
#foreach( $import in $java.imports($entity) )
#set( $b = $import.replace("javax", "jakarta") )
import $b;
#end
#foreach( $import in $jpa.imports($entity) )
#set( $b = $import.replace("javax", "jakarta") )
import $b;
#end

#foreach( $link in $entity.links )
#if($link.fieldName.contains('createdBy'))
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.hibernate.annotations.UpdateTimestamp;
import org.hibernate.annotations.CreationTimestamp;
#end
#end

#foreach( $attribute in $entity.nonKeyAttributes )
#if($attribute.name.contains('geom'))
import org.locationtech.jts.geom.Geometry;
#end
#if($attribute.name.contains('dcre'))
import org.hibernate.annotations.CreationTimestamp;
#end
#if($attribute.name.contains('dmod'))
import org.hibernate.annotations.UpdateTimestamp;
#end
#end

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * JPA entity class for "${entity.name}"
 *
 * @author VEOLIA
 *
 */
$jpa.entityAnnotations(0, $entity)
## IF ENTITY HAS A COMPOSITE PRIMARY KEY => DECLARE 'ID CLASS' FOR THIS PRIMARY KEY
#if ( $entity.hasCompositePrimaryKey() )  
@IdClass(${jpaEntityIdClass}.class)
#end
@JsonIgnoreProperties(ignoreUnknown = true)
public class ${entity.name} implements Serializable {

    private static final long serialVersionUID = 1L;

    //--- ENTITY PRIMARY KEY 
#foreach( $attribute in $entity.keyAttributes )
$jpa.fieldAnnotations(4, $attribute).replace("AUTO", "IDENTITY")
    private $attribute.formattedType(1) $attribute.name #if($attribute.hasInitialValue())= ${attribute.initialValue} #end;

#end
    //--- ENTITY DATA FIELDS 
#foreach( $attribute in $entity.nonKeyAttributes )
#if(!$attribute.isFK())
$jpa.fieldAnnotations(4, $attribute)
#set( $attrName=$attribute.name ) 
#if($valueToRewrite.contains($attribute.name)) 
	#set( $attrName=$attribute.name+'_' )
#end
#if($attribute.name.contains('geom'))
	@JsonProperty("$attribute.databaseName")
    private Geometry $attrName #if($attribute.hasInitialValue())= ${attribute.initialValue} #end;
#else
#if($attribute.name.contains('Dmod'))
    @UpdateTimestamp
#elseif($attribute.name.contains('Dcre'))
    @CreationTimestamp
#end
    @JsonProperty("$attribute.databaseName")
    private $attribute.formattedType(1) $attrName #if($attribute.hasInitialValue())= ${attribute.initialValue} #end;

#end
#end
#end

    //--- ENTITY LINKS ( RELATIONSHIP )
#foreach( $link in $entity.links )
## all annotations : Cardinality, JoinColumn(s), etc
#if( $link.cardinality == "OneToMany" && $link.cascade == "ALL" )
    @OneToMany(mappedBy="$link.mappedBy", cascade=CascadeType.ALL, orphanRemoval=true)
#else
$jpa.linkAnnotations(4, $link)
#end
## $jpa.linkCardinalityAnnotation(4, $link)
## $jpa.linkJoinAnnotation(4, $link)
#if($link.fieldName.contains('createdBy') ||  $link.fieldName.contains('modifiedBy')) 
	@JsonIgnore
#end
    private ${link.formattedFieldType(1)} $link.fieldName ; 

#end

    /**
     * Constructor
     */
    public ${entity.name}() {
		super();
    }
    
    //--- GETTERS & SETTERS FOR FIELDS
#foreach( $attribute in $entity.keyAttributes )
#if(!$attribute.isFK())
#set( $attrName=$attribute.name ) 
#if($valueToRewrite.contains($attribute.name)) 
	#set( $attrName=$attribute.name+'_' )
#end
    public void ${attribute.setter}( $attribute.type $attrName ) {
        this.$attrName = $attrName ;
    }
    public $attribute.type ${attribute.getter}() {
        return this.$attrName;
    }

#end
#end
#foreach( $attribute in $entity.nonKeyAttributes )
#if(!$attribute.isFK())
#set( $attrName=$attribute.name ) 
#if($valueToRewrite.contains($attribute.name)) 
	#set( $attrName=$attribute.name+'_' )
#end
#if($attribute.name.contains('geom'))
	public void ${attribute.setter}( Geometry $attrName ) {
        this.$attrName = $attrName ;
    }

    public Geometry ${attribute.getter}() {
        return this.$attrName;
    }
#else
	public void ${attribute.setter}( $attribute.type $attrName ) {
        this.$attrName = $attrName ;
    }

    public $attribute.type ${attribute.getter}() {
        return this.$attrName;
    }
#end

#end
#end
    //--- GETTERS AND SETTERS FOR LINKS
#foreach( $link in $entity.selectedLinks )
    public ${link.formattedFieldType(0)} ${link.getter}() {
        return this.${link.formattedFieldName(0)};
    }

    public void ${link.setter}(${link.formattedFieldType(0)} ${link.fieldName}) {
        this.${link.formattedFieldName(0)} = ${link.fieldName};
    }
#end

}
