import { Injectable } from '@angular/core';
import { firstValueFrom } from 'rxjs';
import { AppDB } from '../models/app-db.model';
import { ExploitationDataService } from './dataservices/exploitation.dataservice';
import { CustomWorkOrder } from '../models/workorder.model';

@Injectable({
  providedIn: 'root'
})
export class ExploitationService {

  private db: AppDB;

  constructor(
    private exploitationDataService: ExploitationDataService
  ) { 
    this.db = new AppDB();
  }

  /**
   * Get the wanted workorder.
   * If the workorder last state is not found in local storage, get the workorder from the server.
   * @returns A Promise that resolves to the referential
   */
  async getWorkorderById(id: number): Promise<CustomWorkOrder> {
    let workorder = (await this.db.workorders.get(id.toString()))?.data;
    if(!workorder) {
      workorder = await firstValueFrom(this.exploitationDataService.getWorkorderById(id));
    }
    return workorder;
  }

  /**
   * Save last state of a workorder
   * @param workorder the workorder state
   */
  public async saveStateWorkorder(workorder: CustomWorkOrder) {
    await this.db.workorders.put({ data: workorder, key: workorder.id.toString() }, workorder.id.toString());
  }

  /**
   * Delete state of a workorder
   * @param workorder the workorder state
   */
  public async deleteStateWorkorder(workorder: CustomWorkOrder) {
    await this.db.workorders.delete(workorder.id.toString());
  }
}
