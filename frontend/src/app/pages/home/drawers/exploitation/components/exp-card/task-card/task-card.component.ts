import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';
import { DrawerService } from 'src/app/core/services/drawer.service';
import { DrawerRouteEnum } from 'src/app/core/models/drawer.model';
import { WorkorderService } from 'src/app/core/services/workorder.service';
import { Task, WorkorderTaskReason, WorkorderTaskStatus } from 'src/app/core/models/workorder.model';
import { InfiniteScrollCustomEvent } from '@ionic/angular';
import { DateTime } from 'luxon';

@Component({
  selector: 'app-task-card',
  templateUrl: './task-card.component.html',
  styleUrls: ['./task-card.component.scss'],
})
export class TaskCardComponent implements OnInit {
  constructor(
    private drawer: DrawerService,
    private workorderService: WorkorderService
  ) {}

  @Input() tasks: any[];
  @Input() isMapTasks: boolean;
  @Input() loading: boolean = false;
  @Output() public onPagination: EventEmitter<InfiniteScrollCustomEvent> = new EventEmitter();

  public status: WorkorderTaskStatus[];
  public actions: WorkorderTaskReason[];

  ngOnInit() {
    Promise.all([
      this.workorderService.getAllWorkorderTaskStatus(),
      this.workorderService.getAllWorkorderTaskReasons()
    ]).then((res: [WorkorderTaskStatus[], WorkorderTaskReason[]]) => {
      this.status = res[0];
      this.actions = res[1];
    });
  }

  public getPaginationData(e: InfiniteScrollCustomEvent): void {
    this.onPagination.next(e);
  }

  public openTask(feature: any): void {
    this.drawer.navigateTo(DrawerRouteEnum.TASK_VIEW, [
      feature.wkoId,
      feature.id,
    ]);
  }

  public getStatusLabel(id: number): string {
    const label = this.getStatus(id)?.wtsLlabel;
    return label ? label.charAt(0).toUpperCase() + label.slice(1) : '';
  }

  public getStatusCode(id: number): string {
    const wtsCode = this.getStatus(id)?.wtsCode;
    return wtsCode ?? '';
  }

  public getAction(id: number): string {
    const label = this.actions.find((status) => status.id === id)?.wtrLlabel;
    return label ? (label.charAt(0).toUpperCase() + label.slice(1)) : "NC";
  }

  public sameCompletionDate(task: Task): boolean {
    const begin = DateTime.fromJSDate(task.tskCompletionStartDate);
    const end = DateTime.fromJSDate(task.tskCompletionEndDate);

    return begin.hasSame(end, 'day') && begin.hasSame(end, 'month') && begin.hasSame(end, 'year');
  }

  private getStatus(id: number): WorkorderTaskStatus {
    return this.status.find((status) => status.id === id);
  }
}
