import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { DateTime } from 'luxon';
import { Subject, debounceTime, filter, takeUntil } from 'rxjs';
import { City } from 'src/app/core/models/city.model';
import { Contract } from 'src/app/core/models/contract.model';
import { CityService } from 'src/app/core/services/city.service';
import { ContractService } from 'src/app/core/services/contract.service';
import { DialogService } from 'src/app/core/services/dialog.service';
import { FilterService } from 'src/app/core/services/filter.service';
import { UtilsService } from 'src/app/core/services/utils.service';
import { DatepickerComponent } from 'src/app/shared/components/datepicker/datepicker.component';
import { DateValidator } from 'src/app/shared/form-editor/validators/date.validator';

@Component({
  selector: 'app-itv-search',
  templateUrl: './itv-search.component.html',
  styleUrls: ['./itv-search.component.scss'],
})
export class ItvSearchComponent implements OnInit {
  constructor(
    private contractService: ContractService,
    private cityService: CityService,
    private dialogService: DialogService,
    private utilsService: UtilsService,
    private filterService: FilterService
  ) {}

  @Output() public onSearchChange: EventEmitter<any> = new EventEmitter();

  public displayedCities: City[];
  public displayedContracts: Contract[];

  public referentialLoading: boolean;

  public searchForm: FormGroup;
  public isMobile: boolean;

  private cities: City[];
  private contracts: Contract[];

  private currentDateValue: string;

  private ngUnsubscribe$: Subject<void> = new Subject();

  async ngOnInit(): Promise<void> {
    this.isMobile = this.utilsService.isMobilePlateform();
    this.createForm();
    await this.fetchReferentials();
  }

  public ngOnDestroy(): void {
    this.ngUnsubscribe$.next();
    this.ngUnsubscribe$.complete();
  }

  public getContractLabel(contract: Contract): string {
    return contract.ctrLlabel;
  }

  public getCityLabel(city: City): string {
    return city.ctyLlabel;
  }

  public openCalendar(): void {
    this.dialogService
      .open(DatepickerComponent, {
        backdrop: false,
        data: {
          multiple: true,
        },
      })
      .afterClosed()
      .pipe(
        filter(
          (dts: DateTime[]) => dts && (dts.length === 1 || dts.length === 2)
        )
      )
      .subscribe((result: DateTime[]) => {
        this.searchForm.patchValue({
          startDate: result[0].toFormat('dd/MM/yyyy'),
          endDate: (result[1] ? result[1] : result[0]).toFormat('dd/MM/yyyy'),
        });
      });
  }

  public onDateKeyDown(event: any) {
    this.currentDateValue = event.target.value;
    if (!DateValidator.isKeyValid(event, this.currentDateValue)) {
      event.preventDefault();
    }
  }

  public onDateKeyUp(event: any) {
    event.target.value = DateValidator.formatDate(event, this.currentDateValue);
  }

  private async fetchReferentials(): Promise<void> {
    this.referentialLoading = true;

    this.contracts = await this.contractService.getAllContracts();
    this.cities = await this.cityService.getAllCities();

    this.displayedContracts = [...this.contracts];
    this.displayedCities = [...this.cities];

    this.referentialLoading = false;
  }

  private setListeners(): void {
    this.searchForm
      .get('contractIds')
      .valueChanges.pipe(takeUntil(this.ngUnsubscribe$))
      .subscribe((contractIds: number[]) => {});

    this.searchForm
      .get('cityIds')
      .valueChanges.pipe(takeUntil(this.ngUnsubscribe$))
      .subscribe((cityIds: number[]) => {});

    this.searchForm.valueChanges
      .pipe(debounceTime(100), takeUntil(this.ngUnsubscribe$))
      .subscribe((form) => {
        this.filterService.setFilterITV(form);
        this.onSearchChange.next(form);
      });
  }

  private createForm(): void {
    const filter = this.filterService.getFilterITV();
    this.searchForm = new FormGroup({
      contractIds: new FormControl([]),
      cityIds: new FormControl([]),
      defects: new FormControl([]),
      status: new FormControl([]),
      startDate: new FormControl(DateTime.now().minus({ month: 6 }).toFormat('dd/MM/yyyy')),
      endDate: new FormControl(''),
    });
    this.setListeners();
    if (filter && Object.keys(filter).length > 0) {
      for (const key of Object.keys(filter)) {
        if (filter[key]) {
          this.searchForm.patchValue({ [key]: filter[key] } );
        }
      }
    }
  }
}
