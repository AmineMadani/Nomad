import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';
import { DateTime } from 'luxon';
import { filter } from 'rxjs/internal/operators/filter';
import { DatepickerComponent } from 'src/app/shared/components/datepicker/datepicker.component';
import { SearchFilter, Widget } from 'src/app/core/models/filter/filter-component-models/SearchFilter.model';
import { UtilsService } from 'src/app/core/services/utils.service';
import { DialogService } from 'src/app/core/services/dialog.service';
import { IonAccordionGroup } from '@ionic/angular';
import { FormControl, FormGroup } from '@angular/forms';
import { Subject, takeUntil } from 'rxjs';
import { WorkorderService } from 'src/app/core/services/workorder.service';
import { WorkorderTaskReason, WorkorderTaskStatus } from 'src/app/core/models/workorder.model';
import { FilterService } from 'src/app/core/services/filter.service';

@Component({
  selector: 'app-exp-search',
  templateUrl: './exp-search.component.html',
  styleUrls: ['./exp-search.component.scss'],
})
export class ExpSearchComponent implements OnInit, OnDestroy {
  constructor(
    private utils: UtilsService,
    private dialogService: DialogService,
    private filterService: FilterService,
    private workorderService: WorkorderService
  ) {
  }

  @ViewChild('accordionGroup', { static: true }) accordionGroup: IonAccordionGroup;

  @Output() public onSearchChange: EventEmitter<any> = new EventEmitter();

  public isMobile: boolean;
  public actions: WorkorderTaskReason[];
  public status: WorkorderTaskStatus[];
  public searchForm: FormGroup;

  private ngUnsubscribe$: Subject<void> = new Subject();

  ngOnInit(): void {
    this.isMobile = this.utils.isMobilePlateform();
    this.createForm();
    this.getActions();
    this.getStatus();

    this.searchForm.valueChanges
    .pipe(takeUntil(this.ngUnsubscribe$))
    .subscribe((form) => {
      this.onSearchChange.next(form);
    });
  }

  public ngOnDestroy(): void {
    this.ngUnsubscribe$.next();
    this.ngUnsubscribe$.complete();
  }

  public openCalendar(): void {
    this.dialogService
      .open(DatepickerComponent, {
        backdrop: false,
        data: {
          multiple: true,
        },
      })
      .afterClosed()
      .pipe(
        filter(
          (dts: DateTime[]) => dts && (dts.length === 1 || dts.length === 2)
        )
      )
      .subscribe((result: DateTime[]) => {
        this.searchForm.patchValue({
          wkoPlanningStartDate: result[0].toFormat('dd/MM/yyyy'),
          wkoPlanningEndDate: (result[1] ? result[1] : result[0]).toFormat('dd/MM/yyyy')
        });
      });
  }

  public getActionLabel(action: WorkorderTaskReason): string {
    return action.wtrLlabel.charAt(0).toUpperCase() + action.wtrLlabel.slice(1);
  }

  public getStatusLabel(status: WorkorderTaskStatus): string {
    return status.wtsLlabel.charAt(0).toUpperCase() + status.wtsLlabel.slice(1);;
  }

  public setCheckboxValue(controlKey: string, event: Event): void {
    this.searchForm.controls[controlKey].setValue(
      (event as CustomEvent).detail.checked
    );
  }

  private createForm(): void {
    const filter = this.filterService.getFilterForm();
    this.searchForm = new FormGroup({
      wtrIds: new FormControl([]),
      wtsIds: new FormControl([]),
      wkoPlanningStartDate: new FormControl(
        DateTime.now().minus({ months: 3 }).toFormat('dd/MM/yyyy')
      ),
      wkoPlanningEndDate: new FormControl(''),
      wkoEmergency: new FormControl(false),
      wkoAppointment: new FormControl(false),
    });
    if (filter && Object.keys(filter).length > 0) {
      for (const key of Object.keys(filter)) {
        if (filter[key]) {
          this.searchForm.patchValue({ [key]: filter[key] });
        }
      }
    }
  }

  private getActions(): void {
    this.workorderService.getAllWorkorderTaskReasons().subscribe((reasons: WorkorderTaskReason[]) => {
      this.actions = reasons;
    })
  }

  private getStatus(): void {
    this.workorderService.getAllWorkorderTaskStatus().subscribe((status: WorkorderTaskStatus[]) => {
      this.status = status;
    });
  }
}

